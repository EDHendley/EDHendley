#11
Activity:

Using find, find all files under the $HOME directory with a .bin extension ONLY.
Once the file(s) and their path(s) have been found, remove the file name from the absolute path output.
Ensure there is no trailing / at the end of the directory path when outputting to standard output.
You may need to sort the output depending on the command(s) you use. Have each path displayed only once.
Tip: For stripping the filename out of the output, there are different ways that this can be accomplished based on what you have learned so far.

Utilizing -printf options on find.
Utilizing awk to manipulate the fields. This may leave the trailing / if you don't take that into account.
Utilizing the rev and cut commands creatively.

ANSWER
find ~ -iname "*.bin" 2>/dev/null | rev | cut -d. -f2 | rev | sort -u

#12
Activity:

Write a script that will do the following.

Write a script which will copy the last entry/line in the passwd-like file specified by the $1 positional parameter
Modify the copied line to change:
User name to the value specified by $2 positional parameter
Used id and group id to the value specified by $3 positional parameter
Home directory to a directory matching the user name specified by $2 positional parameter under the /home directory (i.e. if the $2 was 'Chris', the new line would have /home/Chris as its home directory)
The default shell to `/bin/bash'
Append the modified line to the end of the file
Example INPUT file's last line.

games:x:5:60::/usr/games:/usr/sbin/nologin
If positional parameter 2 was passed "devildog" and positional paramter 3 was passed "9001", after modifications the appended line would look like this.

devildog:x:9001:9001::/home/devildog:/bin/bash
Tip: awk provides the simplest method for completing this activity. Refer back to your notes on "09 - BASH Activity" if you are in need of starting point on this activity.

Note: The contents of the passwd-like file will be randomly generated on each submission. It is intended to read the last line once and store it in a variable.

To read more on Positional Parameters, go to the following resource:

https://www.gnu.org/software/bash/manual/bash.html#Positional-Parameters
To read more on the Passwd file format, go to the following resource:

man passwd.5

ANSWER:
$1= fileName
$2= userName
$3= userGroupid
tail -1 $1 | awk --F: -v "name=$2" -v "id=$3" 'BEGIN {OFS=":"} {$1=name} {$3=id} {$4=id} {$6="/home/"name} {$7="/bin/bash"} {print}' >> $1
---------------OR-----------------
name =$2
uid=$3
file=$1
base=$(tail -1 $file)
echo $base | awk -F: -v "awkname=$name" -v "awkuid=$uid" 'BEGIN {OFS=":"} {$1=awkname} {$3=awkuid} {$4=awkuid} {&6="/home/awkname} {$NF="/bin/bash"} {print $0} >> $file


#15
Activity:
Write a script which will find and hash the contents 3 levels deep from each of these directories: /bin /etc /var
Your script should:
Exclude file type named pipes. These can break your script.
Redirect STDOUT and STDERR to separate files.
Determine the count of files hashed in the file with hashes.
Determine the count of unsuccessfully hashed directories.
Have both counts output to the screen with an appropriate title for each count.
Example Output:
Successfully Hashed Files: 105
Unsuccessfully Hashed Directories: 23
ANSWER:
find /bin /etc/ /var -maxdepth 3 -not -type p -exec md5sum {} \; 1> success.txt
find /bin /etc/ /var -maxdepth 3 -not -type p -exec md5sum {} \; 2> fail.txt
fail=$(wc -l fail.txt | cut -d' ' -f1)
succ=$(wc -l success.txt | cut -d' ' -f1)

Successfully Hashed Files: $succ
Unsuccessfully Hashed Directories: $fail

=================OR===================
dirs='/bin /etc /var'
find $dirs -maxdepth 3 ! -type p -exec md5sum {} \; >STDOUT.txt 2>STDERR.txt
good=$(cat STDOUT.txt | wc -l)
bad=$(egrep "Is a" STDERR.txt | wc -l)
echo "Successfully Hashed Files: $good"
echo "Unsuccessfully Hashed Directories: $bad"
