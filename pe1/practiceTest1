  1 #!/usr/bin/env python3
  2 
  3 def q1(floatstr):
  4     '''
  5     TLO: 112-SCRPY002, LSA 3,4
  6     Given the floatstr, which is a comma separated string of
  7     floats, return a list with each of the floats in the 
  8     argument as elements in the list.
  9     '''
 10 
 11     newlist=[]
 12     for y in floatstr.split(','):
 13         newlist.append(float(y))
 14     return newlist
 15 
 16 
 17     return floatstr
 18 
 19 
 20     pass
 21 
 22 def q2(*args):
 23     '''
 24     TLO: 112-SCRPY006, LSA 3
 25     TLO: 112-SCRPY007, LSA 4
 26     Given the variable length argument list, return the average
 27     of all the arguments as a float
 28     '''
 29     '''lst=[*args]
 30     adder=0
 31     float(lst)
 32     for x in range(lst):
 33         
 34         adder*=lst[x]
 35     div=len(lst)
 36     avg=adder/div
 37     return avg'''
 38     print(args)
 39     print(type(args))
 40     s=0
 41     for arg in args:
 42         s+=arg
 43     return s/len(args)
 44     pass
 45 
 46 def q3(lst,n):
 47     '''
 48     TLO: 112-SCRPY004, LSA 3
 49     Given a list (lst) and a number of items (n), return a new 
 50     list containing the last n entries in lst.
 51     '''
 52     return lst[-n:]
 53 
 54     pass
 55 
 56 def q4(strng):
 57     '''
 58     TLO: 112-SCRPY004, LSA 1,2
 59     TLO: 112-SCRPY006, LSA 3
 60     Given an input string, return a list containing the ordinal numbers of 
 61     each character in the string in the order found in the input string.
 62     '''
 63     lst=[]
 64     for item in list(strng):
 65         lst.append(ord(item))
 66     return lst
 67 
 68     pass
 69 
 70 def q5(strng):
 71     '''
 72     TLO: 112-SCRPY002, LSA 1,3
 73     TLO: 112-SCRPY004, LSA 2
 74     Given an input string, return a tuple with each element in the tuple
 75     containing a single word from the input string in order.
 76     '''
 77 
 78     return tuple(strng.split())
 79     pass
 80 
 81 def q6(catalog, order):
 82     '''
 83     TLO: 112-SCRPY007, LSA 2
 84     Given a dictionary (catalog) whose keys are product names and values are product
 85     prices per unit and a list of tuples (order) of product names and quantities,
 86     compute and return the total value of the order.
 87 
 88     Example catalog:
 89     {
 90         'AMD Ryzen 5 5600X': 289.99,
 91         'Intel Core i9-9900K': 363.50,
 92         'AMD Ryzen 9 5900X': 569.99
 93     }
 94 
 95     Example order:
 96     [
 97         ('AMD Ryzen 5 5600X', 5), 
 98         ('Intel Core i9-9900K', 3)
 99     ]
100 
101     Example result:
102     2540.45 
103 
104     How the above result was computed:
105     (289.99 * 5) + (363.50 * 3)
106     '''
107 
108 
109 
110     total=[]
111     for key in catalog:
112         for item in order:
113             if item[0]== key:
114                 total.append(catalog[key] * item[1])
115     return sum(total)
116 
117 
118     '''
119     #OR
120     total =[]
121     for product, price in catalog.items():
122         for orderp. quantity in order:
123             if product == orderp:
124                 total.appened(quantity * price)
125     return sum(total)
126     '''
127 
128 
129     pass
130 
131 def q7(filename):
132     '''
133     TLO: 112-SCRPY005, LSA 1
134     Given a filename, open the file and return the length of the first line 
135     in the file excluding the line terminator.
136     '''
137 
138     with open(filename) as fp:
139         x = fp.readline()
140         y = len(x) - 1
141         return y
142     #or
143     #with open(filename) as fp:
144         #return len(fp.readline()) - 1
145 
146     pass
147 
148 def q8(filename,lst):
149     '''
150     TLO: 112-SCRPY003, LSA 1
151     TLO: 112-SCRPY004, LSA 1,2
152     TLO: 112-SCRPY005, LSA 1
153     Given a filename and a list, write each entry from the list to the file
154     on separate lines until a case-insensitive entry of "stop" is found in 
155     the list. If "stop" is not found in the list, write the entire list to 
156     the file on separate lines.
157     '''
158 
159     with open(filename, 'w') as fp:
160         for item in lst:
161             if item.lower()=='stop':
162                 break
163             fp.write(f'{item}\n')
164 
165     pass
166 
167 def q9(miltime):
168     '''
169     TLO: 112-SCRPY003, LSA 1
170     Given the military time in the argument miltime, return a string 
171     containing the greeting of the day.
172     0300-1159 "Good Morning"
173     1200-1559 "Good Afternoon"
174     1600-2059 "Good Evening"
175     2100-0259 "Good Night"
176     '''
177 
178     #for military time and leading zeros: 0o0300 == 0300 
179 
180     if miltime >=300 and miltime<=1159:
181         return "Good Morning"
182     elif miltime>=1200 and miltime<=1559:
183         return "Good Afternoon"
184     elif miltime>=1600 and miltime<=2059:
185         return "Good Evening"
186     elif miltime >=2100 and miltime<=2259:
187         return "Good Night"
188     pass
189 
190 def q10(numlist):
191     '''
192     TLO: 112-SCRPY003, LSA 1
193     TLO: 112-SCRPY004, LSA 1
194     Given the argument numlist as a list of numbers, return True if all 
195     numbers in the list are NOT negative. If any numbers in the list are
196     negative, return False.
197     '''
198 
199     for i in numlist:
200         if i<0:
201             return False
202     return True
203 
204     pass
205 
~                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  
~                                             
