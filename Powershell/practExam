<# 1 #>
function q1($var1,$var2,$var3,$var4) {
    <# Return the product of the arguments #>
    $products=$var1*$var2*$var3*$var4
    #ForEach($product in $products){
        #$product*=$_
        #}
    #$total=$product
    return $products
    }


function q2($arr,$rows,$cols,$key) {
    <# Search the 2 dimensional array for the first occurance of key at column index 0
       and return the value at column index 9 of the same row.
       Return -1 if the key is not found.
    #>


    foreach($row in $arr) {
        if($row[0] -eq $key) {
            return $row[9]}
            }

    return "-1"
}
function q3 {
    <# In a loop, prompt the user to enter positive integers one at time.
       Stop when the user enters a -1. Return the maximum positive
       value that was entered."
	#>
<#$x=0
$array=@()

while($x -ge 0) {
    $x = Read-Host "Enter a positive integer"
    $array+=$x
}
$val=$array | measure -Maximum
return $val #>

$vals = @()
do {
    $val = read-host
    if($val -ne -1) {
        $vals += $val
    }
} until ($val -eq -1)
return $($vals | Measure-Object -Maximum).Maximum
# or sort-objecy -descending; return $vals[0]

}


function q4($filename,$whichline) {
    <# Return the line of text from the file given by the `$filename
	   argument that corresponds to the line number given by `$whichline.
	   The first line in the file corresponds to line number 0."
	#>

$content = Get-Content $filename
return $content[$whichline]





}
function q5($path) {
    <# Return the child items from the given path sorted
       ascending by their Name
	#>

return Get-ChildItem $path | sort BaseName




}
function q6 {
    <# Return the sum of all elements provided on the pipeline
	#>
$nums=@()
$sum=0

foreach($a in $input) {
    $sum += $a
    } 
return $sum

}
function q7 {
	<# Return only those commands whose noun is process #>
Get-Command -Noun process

}
function q8($adjective) {
    <# Return the string 'PowerShell is ' followed by the adjective given
	   by the `$adjective argument
	#>    

return "Powershell is $adjective"



}
function q9($addr) {
	<# Return `$true when the given argument is a valid IPv4 address,
	   otherwise return `$false. For the purpose of this function, regard
	   addresses where all octets are in the range 0-255 inclusive to
	   be valid.
	#>


$pattern='\b(?:(?:2(?:[0-4][0-9]|5[0-5])|[0-1]?[0-9]?[0-9])\.){3}(?:(?:2([0-4][0-9]|5[0-5])|[0-1]?[0-9]?[0-9]))\b'
$addr -match $pattern

if ($Matches){
    return $True
    }
    else {
        return $false

<#foreach($octet in $addr.split(".")) {
    if([int]$octet -lt 0 -or [int]$octet -gt 
    #>
}
}
function q10 ($filepath,$lasthash) {
    <# Return `$true if the contents of the file given in the
       `$filepath argument have changed since `$lasthash was
       computed. `$lasthash is the previously computed SHA256
       hash (as a string) of the contents of the file. #>
 $hash = Get-FileHash -Algorithm SHA256 $filepath
 return $hash.Hash -ne $lasthash
       
}
