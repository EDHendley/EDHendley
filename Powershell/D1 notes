xfreerdp /u:student /v:10.50.45.158 -dynamic-resolution +glyph-cache +clipboard
some tools
xfreerdp
IDA pro
Ghidra
PowerShell ISE

Powershell is a object-oriented language, class and object based so has coinciding methods and attribute. 


syntax uses a Verb-Noun structure, "commands" are cmdlets (command lets)
Verb-Noun -[option] <string[]> -[option] <string[*inputs]> ... etc      *may accept multiple inputs  

Get-Command
Get-Command -Noun <name>
Get-Verb
Get-Process

Want info on a command?
Get-Help <cmdlet>
Get-Help Get-Command
Get-Help Get-Process -Full
"        "           -showwindow
"        "           -online   (preferred help resource)
"        *log*    (or something else, shows you what you can do with whatever in the wild card)
Want to update help pages?
Update-Help -Force -ErrorAction SilentlyContinue

instead of ls or dir
Get-ChildItem
PS will still accept ls or dir but it is an alias
Get-Alias
Want to clear screen?
cls (alias for Clear-Host)
want to remove an alias?
Remove-Item alias:<alias_name_here>
ex
Set-Alias edit notepad.exe
edit  (will open notepad)
Remove-Item alias:edit

want to see all the alias for a cmdlet? for ex, childitem has many aliases attached to it
Get-Alias -Definition Get-ChildItem

want to see all the methods and properties of a proccess?
Get-Process | Get-Member

Pipes and Powershell

Get-Service | Format-Table Name, Status

dir config.log | Rename-Iem -NewName {"old_$($_.Name)"}    every file in config.log will be renamed with "old_" appended to the front of it

write-host vs write-output
-host goes to the screen no matter what
-output goes to standrd output, which could be screen, pipe, etc

"double quotes allows variable expansion so you can call a variable within a string denoted with """
ex 
$var = "Jon"
1. Write-Host "hello $var"
'single quotes returns what is inside as literal'
2. Write-Host 'hello $var"

in first instance the " " will return "hello Jon" to the screen
In the second, the ' ' will return 'hello $var' because it got the literal string

to check the type of a variable, ($var).GetType()

$var = [int32](read-host)
read-host is basically input, takes input from user
write-host is print
===============================================================================================================
Script block / code block
$myblock = { Get-Service | Format-Table Name, Status }    <----notice the curlies, this is NOT a variable, its a script block
& $myblock   <---- how to callback the script block
^  dont forget the and/ampersand
the & is an alias for invoke-command

$a=Get-Process notepad
$b = {Get-Process notepad }

the difference is the variable $a is static, once run it will store the process info for notepad, once notepad is terminated the data remains
with script block & $b, when it is run it will store the same info but once notepad is terminated the info is no longer stored, it is dynamic

Get-ChildItem | Sort-Object -Property Extension | Format-Table -Groupby Extension
  each type of extension will get their own table. clean and easy way to find files by different extensions

Get-Service | Group-Object Status | ft -GroupBy Status     ft is Format-Table

Get-Service | Group-Object {$_.Name.Substring(0,1).ToUpper()} | ForEach-Object{($_.Name + " ") *7; "==========" $_.Group}

Get-Variable | Sort-Object Name | ft -property Name, Description -AutoSize -wrap

Get-Serice | Where-Object{$_.Status -eq 'running'}

Get-ChildItem *.txt | Where-Object {$_.Length -gt 100}

Get-Service | Get-Member

Get-Process | Where-Object {$_.Company -like 'micro*'} | Fortmat-Table Name, Description, Company

Get-Process | Where-Object {$_.Name -notlike 'powershell*'} | Sort-Object id -Descending

Get-Process | Where-Object processname -ne "Idle" | sort-object starttime | Select-Object -ErrorAction ft processname, starttime

1,2,3,12,3,1,2,3,1,2,3 | Sort-Object | Get-Unique
>
1
2
3

(Get-ChildItem | Measure-Object Length).count
    get child item is an array, this measures the length, then displays the count
Get-ChildItem | Measure-Object Length -Average -Maximum -Minimum -Sum

$array = 1, 2, 3, 4, 5
$sum = 0

$array | ForEach-Object {$sum += $_}

making an object

$woman = new-object object 
Add-Member -me NoteProperty -name Color -value 'The best' -InputObject $woman

or

$Soldier = [PSCustomObject]@{
  "FirstName"  =  "jim"
  "LastName"   =  "bom"
  "Rank"       =  "Pvt"
  "MOS"        =  "17C"
  "Position    =  "Insider Threat"
  "Purporse"   =  "Reveal top secrets in a video game to look cool"

}

$text = 'Here is the model number: MO5364'
$pattern = 'MO(\d{3})'
$text -match $pattern
$matches

>result>>>>>
Name        Value
-----       ------
1            536
0            MO536
===========================================

$nums = 1,2,3,4,5
$nums | ForEach-object{$_ * 2}

$list ='a','b','c','d'
$list | ForEach-Object{$_.ToUpper()}

ForEach ($item in gci C:\ -recurse){$item.name}

Get-ChildItem C:\ -recurse | ForEach-Object{$_.name}    must pipe info into a ForEach-Object

ForEach($num in 1..5){$num * 2}

$teams = "Tigers","Pistons","Red Wings", "Lions"
foreach($team in $teams) {"Detriot Steam}

#ForEach processes much faster than ForEach-Object()

$var = ""
while($var -ne "Marines") {
  $var = Read-Host "Which branch of the military is the best?"

$num = 0
do {
  $num
  $num++
} while($num -lt 3)

$num = 0
while ($num -lt 3) {
  $num
  $num++
}

do {
  code block
}until(condition)

$num = 0
do {
  $num
  $num++
}until($num -gt 3)


for (intitialization; condition; increment)
{
  code block to be executed.
}

for($num =1; $num -le 3; $num++){$num}

for($i = 0; $i -le 255; $i++) {
  write-host 192.168.0.$i
}
======================================================================================================
---Arrays---

$x=get-process
($x).GetType
>> Array
$x -is [array]
>>True
$x.count
>>161  (some high number, number of processes running)
$array = @()    empty array
$array2 -5..10
$array[4,-1,2]    [index(s) positions]
$array[-1]    value in last index
>> 10
$array[4..$array.length]
>>
-1
0
1
2
3
4
5
6
7
8
9
10

--Jagged Array-- (prob never use it)
$jaggarray = "joe","jim","jan",(1, ('apple','pear'), 3), "jay"
$jagarray[3][1][1]

--Multi deminsional array--
$TargetingArray = @(
  (35.7219, 51.3347, "Tehran"),
  (39.9042, 1164074, "Beijing"),
  (39.0738,125.8198, "Pyongyang"),
  (33.5138,36.2765,"Damascus"),
)

$TargetingArray[0][1]

foreach ($line in $TargetingArray) {
  if ($line[2] -eq 'Beijing'){
    write-output $line
  }
}

>>
39.9042
116.4074
Beijing
==============================================================
HASH TABLE (aka dictionary)
(key,value)

$myHash = @{First = "John"; Last = "Doe"; Mid = "Bon"; Age = 35
>>
Name            Value
-----            ------
First            John
Last             Doe 
Mid              Bon
Age              35

$myHash.Date=Get-Date
$mylist["Location"]="France"
>>
Name            Value
-----            ------
First            John
Last             Doe
Date             8/30/2023 10:08.04 AM
Mid              Bon
Age              35
Location         France

$myHash.Remove("Location")    will remove Location and it's value

write-host text `n `"quotation marks`"    (back tick `, like \ in other langs, allows you to print special characters
>>
text
"quotation marks"

$test1 = "One Terabyte is $(1TB/1GB) Gigabytes"
$test1
>>
"one Terabyte is 1024 Gigabytes"

$text = @"
Here is text with "quotes"
1TB eq $(1TB/GB) GB.
Variables are resolved.
"$PWD" is your current path.
"@

>>                     $PWD is already a default variable of "print working directory"
"Here is text with "quotes"
1TB eq 1024 GB.
Variables are resolved.
C:/Windows/system32 is your current path."

(ipconfig) -match 'IPv4'
>>
IPv4 Address. . . . . . . . . . : 192.168.65.10

'192.168.0.1' -replace '\d{1,3}$','255'
>>
192.168.0.255

$env:username, '@', $env:computername, ".", $env:userdomain -join ""
>>
student@wIN-OPS.WIN-OPS

get-process | select name, description | where description -match '^S'










