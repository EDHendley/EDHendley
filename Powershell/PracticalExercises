Practical Exercise: Find Cmdlets
1. Ensure that you have the latest copy of help by updating your help system.
      Update-Help -Force -ErrorAction SilentlyContinue

2.Which cmdlets deal with the viewing/manipulating of processes?
      Get-Process

3.Display a list of services installed on your local computer.
      Get-Service

4.What cmdlets are used to write or output objects or text to the screen?
      Write-Host, Write-Output

5.What cmdlets can be used to create, modify, list, and delete variables?
      Get-Variable, dir env, Remove-Variable, Set-Variable, New-Variable, $var=... Remove-Variable

6.What cmdlet can be used, other than Get-Help, to find and list other cmdlets?
      Get-Command (-Noun), Get-Verb

7.Find the cmdlet that is used to prompt the user for input.
      Read-Host
===================================================================================================================================
Practical Exercise: Running Cmdlets

1.Display a list of running processes.
	Get-Process
2.Display a list of all running processes that start with the letter "s".
	Get-Process -Name s*
3.Find the cmdlet and its purpose for the following aliases:

  a.gal
	Get-Alias
  b.dir
	Get-ChildObject
  c.echo
	Write-Output
  d.?

  e.%

  f.ft

4.Display a list of Windows Firewall Rules.

5.Create a new alias called "gh" for the cmdlet "Get-Help"
	Set-Alias gh Get-Help
variables

   1.$var1= get-random -Maximum 50 -Minimum 25
   2.$var2=Get-Random -Minimum 1 -Maximum 10
   5.$prod = $var1 * $var2
   
   9.Replace the variables in text with their values in the following format:

"var1" * "var2" = "prod"
"{0} * {1} = {2}" -f $va1, $var2, $prod

=================================================================================================

Practical Exercise: The Pipeline
1.Display the start time of the earliest and latest running processes
	Get-process | where-object{$_.name -ne "idle"} | sort-object -Property StartTime | Select-object
2.Identify a cmdlet that returns the current date and time then using this cmdlet and Select-object, display only the current day of the week
	Get-Date | Select-Object -Property DayOfWeek
3.Identify a cmdlet that displays a list of installed hotfixes.
	Get-HotFix
4.Extend the expression to sort the list by install date, and display only the install date and hotfix ID.
	Get-HotFix | Sort-Object -Property InstalledOn | Select-Object InstalledOn, HotfixID
5.Extend the expression further, but this time sort by description, include description, hotfix ID, and install Date.
	Get-HotFix | Sort-Object -Property InstalledOn | Select-Object description, InstalledOn, HotfixID
========================================================================================================
Practical Exercise: Comparison and Condition
Find and extract the model number from the provided lines of text. If there isn’t a model number then display to the user that a model number wasn’t found

Check both lines for model numbers and report individually the line and model number if found.


$line1,$line2 | % { if($_ -match $patty) {$Matches.Values} else {'model not found' } }
"$line1" Do you have model number: MT5437 for john.doe@sharklasers.com?
"$line2" What model number for john.doe@sharklasers.com?
"$patty" ([A-Za-z])+\d[0-9]+

matches found>>
T
MT5437
model not found

go to cyber chef for a prebuilt ipv4 regex and some other things

Adv Func
Regex
Create Func
Reverse Array
Array & Hash Table

===============================================================================================
0.0.0.0 to 255.255.255.255 regex finder:
\b(?:(?:2(?:[0-4][0-9]|5[0-5])|[0-1]?[0-9]?[0-9])\.){3}(?:(?:2([0-4][0-9]|5[0-5])|[0-1]?[0-9]?[0-9]))\b

==============================================================================
REV ARRAY
$start=Get-random -minimum "-10" -maximum 0
$stop= Get-random -minimum "-5" -maximum 5
$arry= $num1..$num2
$arry

$reverse=$arry[(array.length-1)..0]
or
[array]::Reverse($array)
or
sort object | descending

HASH TABLE
$employee1=[ordered]@{}
$employee2=[ordered]@{}

$employee1.First = "Mary"
$employee1["Last"] = "Hopper"
$employee1.ID="001"
$employee1["Job"] = "Software Developer"

$employee1.Job = "Software Lead"

================================================
LOOPING & ITERATION

$procs = "notepad", "msedge", "mspaint"

$proces | ForEach-Object { Start-Process $_ }

Get-Process

###$procs | ForEach-Object { Stop-Process $_}### not useful

$file = "$pwd\procs.txt"

foreach($proc in $procs){
	get-process | Where-Objext{$_.Name -like $proc}
	ForEach-Object{Add-Content $file $_.ID} }
Start-Sleep -seconds 5

get-content .\procs.txt | forEach-Object{Stop-process $_}
=============================================================================
CREAT FUNCTIONS

##Get-OrdinalDate
Function Get-OrdinalDate {
    $date=(get-date).dayofyear
    $year=(get-date).year
    write-host $year"-"$date
}
##Get-SquareNum
Function Get-SquareNum([Int]$num) {
    $result = $num * $num
    $result
}
##Get-Product
Function Get-Product($val1,$val2,$val3) {
    return $val1 * $val2 * $val3
}
=============================================================================
ADV FUNC

##Get-MultiSum
Function Get-MultiSum([array]$array,[int]$number) {
    Begin {
        $sum = 0
    }
    Process {
        ForEach($num in $array) {
            if($num -eq $number) {
                continue
            }
            $sum += $num
        }
    }
    End {
        $sum
    }
}
##Get-LongestName
Function Get-LongestName {
    Begin {
        $count = 0
        $states = @()
    }
    Process {
        while($count -lt 3) {
            $res = Read-Host "Enter a U.S. State"
            $states += $res
            $count += 1
        }
    }
    End {
        $list = $states | sort -Property Length -Descending
        ForEach($state in $list) {
            "$state`: " + $state.length
        }
    }
}
=======================================================================================================================================
REGEX

Function Get-NetInfo {
    $pattern = '.*?((\d{1,3}\.){3}\d{1,3})'
    $netinfo = ipconfig
    $ip = $netinfo -match "IPV4$pattern" | %{if($_ -match $pattern) {$Matches[1] }}
    $subnet = $netinfo -match "Subnet$pattern" | %{if($_ -match $pattern) {$Matches[1] }}
    $gw = $netinfo -match "Gateway$pattern" | %{if($_ -match $pattern) {$Matches[1]}}
    "IP: {0}`nSubnet: {1}`nGateway: {2}" -f $ip, $subnet, $gw
}
##
<#
Function Get-UrlInfo {
    $file = gc .\dns.txt
    $regex = '(www\.[a-zA-Z0-9\-\.]+\.(com|org|net))'
    #$regex = '(w{3}\.)(?<=[a-z]\.)(c-m){3}'
    foreach($line in $file) {
        if($line -match $regex) {
            $Matches[1]
        }
    }
}
##
#>
Function Get-UrlInfo {
    $ips = @()
    $file = gc .\dns.txt
    $regex = '(www\.[a-zA-Z0-9\-\.]+\.(com|org|net))'
    #$regex = '(w{3}\.)(?<=[a-z]\.)(c-m){3}'
    foreach($line in $file) {
        if($line -match $regex) {
            $Matches[1]
            $ips += $Matches[1]
        }
    }
    $ips.count
    $ips | sort | group
}
======================================================================================================



Invoke-WebRequest -Uri
"10.50.34.170:8080/psexam.exe -outfile C:\User
















