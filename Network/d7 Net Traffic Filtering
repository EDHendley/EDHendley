Network Device Operation Mode

  Routed mode -- the firewall is a "routed hop" in the network. It has addressable interfaces in different          networks, can perform NAT between connected networks, and can use routing protocols to relay information          between security zones.

  Transparent mode -- A transparent firewall is placed on the network as a Layer 2 device that acts like a          "bump in the wire". It is not seen as a hop to connected devices is also called a "stealth firewall".             Benefits to this type of setup include it makes it much more difficult for an attacker to find the firewall       and perform reconnaissance such as "Firewalking".

Configuring Tables

  filter - default. ACCEPTS, DROPS, or REJECTS packets,
    INPUT, FORWARD, OUTPUT
  nat - used to translate private and public addresses + ports,
    INPUT, FORWARD, OUTPUT
  mangle - provides special packet alteration. can modify various fields headers fields
    PREROUTING, POSTROUTING, INPUT, FORWARD, OUTPUT
  raw - used to configure exemptions from connection tracking
    PREROUTING, OUTPUT
  security - used for MAC networking rules
    INPUT, FORWARD, OUTPUT

iptables -t [table] -A [chain] [rules] -j [action]
--line numbers,
-P changes default policy (whitelist/blacklist), check this before flushing (-F)

NFTABLES
1.Create the Table
  nft add table [family] [table]
    [family] = ip, ip6, inet, arp, bridge and netdev.
    [table] = user provided name for the table.
2.Create the Base Chain
  nft add chain [family] [table] [chain] { type [type] hook [hook]
    priority [priority] \; policy [policy] \;}
    [chain] = User defined name for the chain.
    [type] = can be filter, route or nat.
    [hook] = prerouting, ingress, input, forward, output or postrouting. 
    [priority] = user provided integer. Lower number = higher priority. default = 0. Use "--" before negative           numbers.
    ; [policy] ; = set policy for the chain. Can be accept (default) or drop.
      Use "\" to escape the ";" in bash

3. Create a rule in the Chain
  nft add rule [family] [table] [chain] [matches (matches)] [statement]
    [matches] = typically protocol headers(i.e. ip, ip6, tcp, udp, icmp, ether, etc)
    (matches) = these are specific to the [matches] field.
    [statement] = action performed when packet is matched. Some examples are: log, accept, drop, reject, counter,       nat (dnat, snat, masquerade)
  #Modify nftables
    nft {list | flush} ruleset
    nft {delete | list | flush } table [family] [table]
    nft {delete | list | flush } chain [family] [table] [chain]

  #Modify nftables
    nft list table [family] [table] [-a]
      
      Adds after position
        nft add rule [family] [table] [chain] [position <position>] [matches (matches)] [statement]

      Inserts before position
        nft insert rule [family] [table] [chain] [position <position>] [matches (matches)] [statement]
      Replaces rule at handle
        nft replace rule [family] [table] [chain] [handle <handle>] [matches (matches)] [statement]
      Deletes rule at handle
        nft delete rule [family] [table] [chain] [handle <handle>]

EXAMPLES

sudo iptables -L
sudo iptables -A INPUT -dport 22 -j ACCEPT (adds rule allows SSH traffic IN our box)
sudo iptables -A OUTPUT -sport 22 -j ACCEPT (adds rule allows SSH traffic OUT our box)
sudo iptables -A INPUT -p tcp -m multiport --port 22,23,80 -j ACCEPT
sudo iptables -A OUTPUT -p tcp -m multiport --port 22,23,80 -j ACCEPT
sudo iptables -P INPUT DROP
sudo iptables -P OUTPUT DROP
sudo iptables -L -n --line-numbers

-m is match
-m state --state NEW,ESTABLISHED,etc
can use multiple matches in one line but have to use new -m everytime
sudo iptables -A INPUT -p tcp -m multiport --port 22,23,80 -m state --state NEW -j ACCEPT

sudo nft add table ip CCTC 
sudo nft add chain ip CCTC input {type filter hook input priority 0 \; policy accept \;} (makes sure to reference the same table, here its CCTC)
sudo nft add chain ip CCTC output {type filter hook output priority 0 \; policy accept \;} (makes sure to reference the same table, here its CCTC)


sudo nft add rule ip MyTable input tcp dport {ssh,telnet,http}
sudo nft add rule ip MyTable input tcp sport {ssh,telnet,http}

SOURCE NAT
iptables -t nat -A POSTROUTING -o eth0 -j SNAT --to 1.1.1.1                (slide 12.3)
DESTI NAT
iptables -t nat -A PREROUTING -i eth0 -j DNAT --to 10.0.0.1                (slide 12.4)
SOURCE PAT
iptables -t nat -A POSTROUTING -p tcp -o eth0 -j SNAT --to 1.1.1.1:9001    (slide 12.5)
DEST PAT
iptables -t nat -A PREROUTING -p tcp -i eth0 -j DNAT --to 10.0.0.1:8080    (slide 12.6)

Source NAT
    nft add rule ip NAT POSTROUTING ip saddr 10.1.0.2 oif eth0 snat 144.15.60.11
Destination NAT
    nft add rule ip NAT PREROUTING iif eth0 tcp dport { 80, 443 } dnat 10.1.0.3
Source NAT w/ masquerade
  nft add rule ip NAT POSTROUTING ip saddr 10.1.0.0/24 oif eth0 masquerade
Destination NAT (port forwarding) with redirect
  nft add rule ip NAT PREROUTING tcp dport 80 redirect to 8080


task 1 T@bl3sth@tF1lt3r
task 2 N@tF1lt3rsf0rL1f3


Allow New and Established traffic to/from via SSH, TELNET, and RDP
sudo iptables -t filter -A INPUT -p tcp -m multiport --port 22,23,3389 -m state --state NEW,ESTABLISHED -j ACCEPT
sudo iptables -t filter -A OUTPUT -p tcp -m multiport --port 22,23,3389 -m state --state NEW,ESTABLISHED -j ACCEPT

Allow New and Established traffic to/from via HTTP
sudo iptables -A INPUT -p tcp -m multiport --port 80 -m state --state NEW,ESTABLISHED -j ACCEPT
sudo iptables -A OUTPUT -p tcp -m multiport --port 80 -m state --state NEW,ESTABLISHED -j ACCEPT

Change the Default Policy in the Filter Table for the INPUT, OUTPUT, and FORWARD chains to DROP 
sudo iptables -P INPUT DROP
sudo iptables -P FORWARD DROP
sudo iptables -P OUTPUT DROP         **DO THIS LAST**
----------------------------------------------------------------------------------------------------------
Create input and output base chains with: Hooks Priority of 0 Policy as Accept
sudo nft add chain ip CCTC input {type filter hook input priority 0 \; policy accept \;}
sudo nft add chain ip CCTC output {type filter hook input priority 0 \; policy accept \;}

Allow New and Established traffic to/from via SSH, TELNET, and RDP
sudo nft add rule ip CCTC input ct state new,established tcp sport {ssh, telnet, 3389} accept
### change input to output and for each change sport to dport

Change your chains to now have a policy of Drop
### in the base chains, change policy accept to policy drop **DO THIS LAST**

Allow ping (ICMP) requests (and reply) to and from the Pivot.
sudo nft add rule ip CCTC input icmp code 0 ip saddr 10.10.0.40 accept
### change to output, then icmp code to 8 AND saddr to daddr, FOR EACH

Allow ports 5050 and 5150 for both udp and tcp traffic to/from
sudo nft add rule ip CCTC input tcp sport {5050,5150} accept
### change to output, tcp to udp AND sport to dport FOR EACH

Allow New and Established traffic to/from via HTTP
### same as for SSH, telnet, etc... but with port 80 for http
---------------------------------------------------------------------------------------------------------



t1 467accfb25050296431008a1357eacb1
t2 9f7a33941828bdafd2755fd20176cdf4
t3 05e5fb96e2a117e01fc1227f1c4d664c
md5sum 953e720e688941b15b72c098022c51c3
verified flag d3b88e04de1e76482a1972f36734a7d8

NAT t5 0c2ca80fad4accccce3bcecec1d238ce
NAT t6 be33fe60229f8b8ee22931a3820d30ac
